{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\lptechnologies\\\\client\\\\src\\\\pages\\\\view.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Views = () => {\n  _s();\n  const [integers, setIntegers] = useState([]);\n  const [count, setCount] = useState(1);\n  const [chartData, setChartData] = useState({});\n  async function fetchAllInts() {\n    try {\n      let response = await axios.get(\"http://localhost:8800/data/\" + count);\n      console.log(response);\n      setIntegers(response.data);\n      if (count == 50) {\n        setCount(1);\n      } else {\n        setCount(count + 1);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  useEffect(() => {\n    const interval = setInterval(() => {\n      fetchAllInts();\n      const data = {\n        labels: ['850 MHZ', '1000 MHZ', '1150 MHZ'],\n        datasets: [{\n          label: 'Test Data',\n          data: integers,\n          fill: false\n        }]\n      };\n      const ctx = document.getElementById('myChart');\n      const mychart = new Chart(ctx, {\n        type: 'line',\n        data: data\n      });\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Test Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"myChart\",\n      width: \"400\",\n      height: \"400\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n_s(Views, \"TSNw9wv4Q382LxvfTSHIetM/tmE=\");\n_c = Views;\nexport default Views;\nvar _c;\n$RefreshReg$(_c, \"Views\");","map":{"version":3,"names":["React","useEffect","useState","axios","Chart","jsxDEV","_jsxDEV","Views","_s","integers","setIntegers","count","setCount","chartData","setChartData","fetchAllInts","response","get","console","log","data","err","interval","setInterval","labels","datasets","label","fill","ctx","document","getElementById","mychart","type","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","id","width","height","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/lptechnologies/client/src/pages/view.js"],"sourcesContent":["import React, { useEffect } from 'react'\r\nimport { useState } from 'react'\r\nimport axios from 'axios'\r\nimport Chart from 'chart.js/auto'\r\n\r\nconst Views = () => {\r\n    const [integers, setIntegers] = useState([])\r\n    const [count, setCount] = useState(1);\r\n    const [chartData, setChartData] = useState({})\r\n\r\n    async function fetchAllInts(){\r\n        try {\r\n            let response = await axios.get(\"http://localhost:8800/data/\" + count);\r\n            console.log(response);\r\n            setIntegers(response.data);\r\n            if (count == 50){\r\n                setCount(1);\r\n            } else {\r\n                setCount(count + 1);\r\n            }\r\n\r\n        } catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {   \r\n        const interval = setInterval(() => {\r\n            fetchAllInts();\r\n            const data = {\r\n                labels: ['850 MHZ', '1000 MHZ', '1150 MHZ'],\r\n                datasets: [\r\n                    {\r\n                        label: 'Test Data',\r\n                        data: integers,\r\n                        fill: false,\r\n                        \r\n                    }\r\n                ]\r\n            };\r\n\r\n            const ctx = document.getElementById('myChart')\r\n            const mychart = new Chart(ctx, {\r\n                type: 'line',\r\n                data: data,\r\n            })\r\n        }, 1000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Test Data</h1>\r\n                <canvas id=\"myChart\" width=\"400\" height=\"400\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Views;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,eAAe;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE9C,eAAea,YAAYA,CAAA,EAAE;IACzB,IAAI;MACA,IAAIC,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAC,6BAA6B,GAAGN,KAAK,CAAC;MACrEO,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;MACrBN,WAAW,CAACM,QAAQ,CAACI,IAAI,CAAC;MAC1B,IAAIT,KAAK,IAAI,EAAE,EAAC;QACZC,QAAQ,CAAC,CAAC,CAAC;MACf,CAAC,MAAM;QACHA,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;MACvB;IAEJ,CAAC,CAAC,OAAMU,GAAG,EAAC;MACRH,OAAO,CAACC,GAAG,CAACE,GAAG,CAAC;IACpB;EACJ;EAEApB,SAAS,CAAC,MAAM;IACZ,MAAMqB,QAAQ,GAAGC,WAAW,CAAC,MAAM;MAC/BR,YAAY,EAAE;MACd,MAAMK,IAAI,GAAG;QACTI,MAAM,EAAE,CAAC,SAAS,EAAE,UAAU,EAAE,UAAU,CAAC;QAC3CC,QAAQ,EAAE,CACN;UACIC,KAAK,EAAE,WAAW;UAClBN,IAAI,EAAEX,QAAQ;UACdkB,IAAI,EAAE;QAEV,CAAC;MAET,CAAC;MAED,MAAMC,GAAG,GAAGC,QAAQ,CAACC,cAAc,CAAC,SAAS,CAAC;MAC9C,MAAMC,OAAO,GAAG,IAAI3B,KAAK,CAACwB,GAAG,EAAE;QAC3BI,IAAI,EAAE,MAAM;QACZZ,IAAI,EAAEA;MACV,CAAC,CAAC;IACN,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAMa,aAAa,CAACX,QAAQ,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAGN,oBACIhB,OAAA;IAAA4B,QAAA,gBACI5B,OAAA;MAAA4B,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eACdhC,OAAA;MAAQiC,EAAE,EAAC,SAAS;MAACC,KAAK,EAAC,KAAK;MAACC,MAAM,EAAC;IAAK;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAClD;AAEd,CAAC;AAAA9B,EAAA,CArDKD,KAAK;AAAAmC,EAAA,GAALnC,KAAK;AAuDX,eAAeA,KAAK;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}