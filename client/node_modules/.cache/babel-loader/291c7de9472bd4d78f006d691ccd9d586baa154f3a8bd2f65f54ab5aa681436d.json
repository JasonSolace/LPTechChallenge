{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\lptechnologies\\\\client\\\\src\\\\pages\\\\view.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport axios from 'axios';\nimport LineChart from 'react-google-charts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Views = () => {\n  _s();\n  const [integers, setIntegers] = useState([]); //Will hold the data points from the SQL Database\n  const [count, setCount] = useState(1);\n  const [chartData, setChartData] = useState([]); //Handles graph updates\n  const [date, setDate] = useState([]);\n  useEffect(() => {\n    //Handles the updates of our variables, changing every 1 second\n    const fetchdata = async () => {\n      const integerAPI = \"http://localhost:8800/data/\" + count;\n      const dateAPI = \"http://localhost:8800/date/\" + count;\n      const getInteger = await axios.get(integerAPI);\n      const getDate = await axios.get(dateAPI);\n      axios.all([getInteger, getDate]).then(axios.spread(function () {\n        for (var _len = arguments.length, allData = new Array(_len), _key = 0; _key < _len; _key++) {\n          allData[_key] = arguments[_key];\n        }\n        setIntegers(allData[0].data);\n        setDate(allData[1].data);\n        const data = [['MHZ', 'dBM']];\n        let startingMHZ = 850;\n        for (let i = 0; i < integers.length; i++) {\n          data.push([startingMHZ, integers[i]]);\n          startingMHZ += 0.5;\n        }\n        setChartData(data);\n        setCount(count + 1);\n      }));\n    };\n    setTimeout(() => {\n      fetchdata();\n    }, 1000);\n  });\n  const options = {\n    //Chart Options that can be changed as needed.\n    title: 'LP Technologies Graph',\n    curveType: 'function',\n    legend: {\n      position: 'bottom'\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: count - 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), chartData.length > 1 && /*#__PURE__*/_jsxDEV(LineChart, {\n      chartType: \"LineChart\",\n      data: chartData,\n      options: options,\n      width: \"100%\",\n      height: \"400px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this) && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: date.trace_time\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_s(Views, \"Ei6pajX7oq2ZQeuj+cYUSgHgsaA=\");\n_c = Views;\nexport default Views;\nvar _c;\n$RefreshReg$(_c, \"Views\");","map":{"version":3,"names":["React","useEffect","useState","axios","LineChart","jsxDEV","_jsxDEV","Views","_s","integers","setIntegers","count","setCount","chartData","setChartData","date","setDate","fetchdata","integerAPI","dateAPI","getInteger","get","getDate","all","then","spread","_len","arguments","length","allData","Array","_key","data","startingMHZ","i","push","setTimeout","options","title","curveType","legend","position","children","fileName","_jsxFileName","lineNumber","columnNumber","chartType","width","height","trace_time","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/lptechnologies/client/src/pages/view.js"],"sourcesContent":["import React, { useEffect } from 'react'\r\nimport { useState } from 'react'\r\nimport axios from 'axios'\r\nimport LineChart from 'react-google-charts'\r\n\r\nconst Views = () => {\r\n    const [integers, setIntegers] = useState([]) //Will hold the data points from the SQL Database\r\n    const [count, setCount] = useState(1)\r\n    const [chartData, setChartData] = useState([]) //Handles graph updates\r\n    const [date, setDate] = useState([]);\r\n\r\n    useEffect(() => { //Handles the updates of our variables, changing every 1 second\r\n        const fetchdata = async () => {\r\n            const integerAPI = \"http://localhost:8800/data/\" + count;\r\n            const dateAPI = \"http://localhost:8800/date/\" + count;\r\n    \r\n            const getInteger = await axios.get(integerAPI);\r\n            const getDate = await axios.get(dateAPI);\r\n    \r\n            axios.all([getInteger, getDate]).then(\r\n                axios.spread((...allData) => {\r\n                    setIntegers(allData[0].data);\r\n                    setDate(allData[1].data);\r\n\r\n                    const data = [['MHZ', 'dBM']]\r\n                    let startingMHZ = 850;\r\n\r\n                    for (let i = 0; i < integers.length; i++){\r\n                        data.push([startingMHZ, integers[i]])\r\n                        startingMHZ += (0.5)\r\n                    }\r\n                    setChartData(data);\r\n\r\n\r\n                    setCount(count + 1);\r\n\r\n    \r\n                })\r\n            )\r\n        }\r\n\r\n        setTimeout(() => {\r\n            fetchdata();\r\n        }, 1000)\r\n    })\r\n\r\n    const options = { //Chart Options that can be changed as needed.\r\n        title: 'LP Technologies Graph',\r\n        curveType: 'function',\r\n        legend: {position: 'bottom'}\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>{count - 1}</h1>\r\n            {chartData.length > 1 && (\r\n            <LineChart\r\n                chartType = \"LineChart\"\r\n                data = {chartData}\r\n                options = {options}\r\n                width=\"100%\"\r\n                height=\"400px\"\r\n                />\r\n            ) && <h3>{date.trace_time}</h3>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Views;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}