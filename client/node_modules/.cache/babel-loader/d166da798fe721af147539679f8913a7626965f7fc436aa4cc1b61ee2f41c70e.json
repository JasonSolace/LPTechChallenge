{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\lptechnologies\\\\client\\\\src\\\\pages\\\\view.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport axios from 'axios';\nimport LineChart from 'react-google-charts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Views = () => {\n  _s();\n  const [integers, setIntegers] = useState([]); //Will hold the data points from the SQL Database\n  const [count, setCount] = useState(1); //Keeps track of list of data we're on\n  const [chartData, setChartData] = useState([]); //Handles graph updates\n\n  async function fetchAllInts() {\n    try {\n      //Grab API Response, store it in our needed variables, and make sure count never goes out of bound\n      let response = await axios.get(\"http://localhost:8800/data/\" + count);\n      setIntegers(response.data);\n      if (count === 50) {\n        setCount(1);\n      } else {\n        setCount(count + 1);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  function createData() {\n    //This formats the data for our chart to use\n    const data = [['MHZ', 'dBM']];\n    let startingMHZ = 850;\n    for (let i = 0; i < integers.length; i++) {\n      data.push([startingMHZ, integers[i]]);\n      startingMHZ += 0.5;\n    }\n    return data;\n  }\n  useEffect(() => {\n    //Handles the updates of our variables, changing every 1 second\n    const interval = setInterval(() => {\n      fetchAllInts();\n      setChartData(createData());\n    }, 1000);\n    return () => clearInterval(interval);\n  });\n  const options = {\n    //Chart Options that can be changed as needed.\n    title: 'LP Technologies Graph',\n    curveType: 'function',\n    legend: {\n      position: 'bottom'\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(LineChart, {\n      chartType: \"LineChart\",\n      data: chartData,\n      options: options,\n      width: \"100%\",\n      height: \"400px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n_s(Views, \"1BMMR1xa/zft0angZ9fT57t3olo=\");\n_c = Views;\nexport default Views;\nvar _c;\n$RefreshReg$(_c, \"Views\");","map":{"version":3,"names":["React","useEffect","useState","axios","LineChart","jsxDEV","_jsxDEV","Views","_s","integers","setIntegers","count","setCount","chartData","setChartData","fetchAllInts","response","get","data","err","console","log","createData","startingMHZ","i","length","push","interval","setInterval","clearInterval","options","title","curveType","legend","position","children","chartType","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/lptechnologies/client/src/pages/view.js"],"sourcesContent":["import React, { useEffect } from 'react'\r\nimport { useState } from 'react'\r\nimport axios from 'axios'\r\nimport LineChart from 'react-google-charts'\r\n\r\nconst Views = () => {\r\n    const [integers, setIntegers] = useState([]) //Will hold the data points from the SQL Database\r\n    const [count, setCount] = useState(1); //Keeps track of list of data we're on\r\n    const [chartData, setChartData] = useState([]) //Handles graph updates\r\n\r\n    async function fetchAllInts(){\r\n        try {\r\n            //Grab API Response, store it in our needed variables, and make sure count never goes out of bound\r\n            let response = await axios.get(\"http://localhost:8800/data/\" + count);\r\n            setIntegers(response.data);\r\n\r\n            if (count === 50){\r\n                setCount(1);\r\n            } else {\r\n                setCount(count + 1);\r\n            }\r\n\r\n        } catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    function createData(){ //This formats the data for our chart to use\r\n        const data = [['MHZ', 'dBM']]\r\n        let startingMHZ = 850;\r\n\r\n        for (let i = 0; i < integers.length; i++){\r\n            data.push([startingMHZ, integers[i]])\r\n            startingMHZ += (0.5)\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    useEffect(() => { //Handles the updates of our variables, changing every 1 second\r\n        const interval = setInterval(() => {\r\n            fetchAllInts();\r\n            setChartData(createData());\r\n        }, 1000);\r\n\r\n        return () => clearInterval(interval);\r\n    })\r\n\r\n    const options = { //Chart Options that can be changed as needed.\r\n        title: 'LP Technologies Graph',\r\n        curveType: 'function',\r\n        legend: {position: 'bottom'}\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <LineChart\r\n                chartType = \"LineChart\"\r\n                data = {chartData}\r\n                options = {options}\r\n                width=\"100%\"\r\n                height=\"400px\"\r\n                />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Views;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,qBAAqB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,EAAC;EAC7C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,EAAC;;EAE/C,eAAea,YAAYA,CAAA,EAAE;IACzB,IAAI;MACA;MACA,IAAIC,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAC,6BAA6B,GAAGN,KAAK,CAAC;MACrED,WAAW,CAACM,QAAQ,CAACE,IAAI,CAAC;MAE1B,IAAIP,KAAK,KAAK,EAAE,EAAC;QACbC,QAAQ,CAAC,CAAC,CAAC;MACf,CAAC,MAAM;QACHA,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;MACvB;IAEJ,CAAC,CAAC,OAAMQ,GAAG,EAAC;MACRC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IACpB;EACJ;EAEA,SAASG,UAAUA,CAAA,EAAE;IAAE;IACnB,MAAMJ,IAAI,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAC7B,IAAIK,WAAW,GAAG,GAAG;IAErB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGf,QAAQ,CAACgB,MAAM,EAAED,CAAC,EAAE,EAAC;MACrCN,IAAI,CAACQ,IAAI,CAAC,CAACH,WAAW,EAAEd,QAAQ,CAACe,CAAC,CAAC,CAAC,CAAC;MACrCD,WAAW,IAAK,GAAI;IACxB;IAEA,OAAOL,IAAI;EACf;EAEAjB,SAAS,CAAC,MAAM;IAAE;IACd,MAAM0B,QAAQ,GAAGC,WAAW,CAAC,MAAM;MAC/Bb,YAAY,EAAE;MACdD,YAAY,CAACQ,UAAU,EAAE,CAAC;IAC9B,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAMO,aAAa,CAACF,QAAQ,CAAC;EACxC,CAAC,CAAC;EAEF,MAAMG,OAAO,GAAG;IAAE;IACdC,KAAK,EAAE,uBAAuB;IAC9BC,SAAS,EAAE,UAAU;IACrBC,MAAM,EAAE;MAACC,QAAQ,EAAE;IAAQ;EAC/B,CAAC;EAGD,oBACI5B,OAAA;IAAA6B,QAAA,eACI7B,OAAA,CAACF,SAAS;MACNgC,SAAS,EAAG,WAAW;MACvBlB,IAAI,EAAIL,SAAU;MAClBiB,OAAO,EAAIA,OAAQ;MACnBO,KAAK,EAAC,MAAM;MACZC,MAAM,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACZ;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACJ;AAEd,CAAC;AAAAlC,EAAA,CA7DKD,KAAK;AAAAoC,EAAA,GAALpC,KAAK;AA+DX,eAAeA,KAAK;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}